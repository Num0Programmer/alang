data $argc_fmt = { b "\nNumber of arguments = %u\n", b 0 }
data $file_name_fmt = { b "File name = %s\n", b 0 }
data $file_size_fmt = { b "File size = %lu bytes\n", b 0 }
data $ch_fmt = { b "character = %c; code = %u\n", b 0 }
data $file_token_fmt = { b "File token (len=%lu) = %s\n", b 0 }
data $err_open_file = { b "Error: could not open specified file!\n", b 0 }
data $read_mode = { b "r", b 0 }
data $max_token_len = { l 9, b 0 }  # extra byte for null terminator


function l $get_token(l %buffer, l %capacity, l %fh)
{
@start
    %_capacity =l sub %capacity, 1
    %len =l copy 0
@get_char
    %ch =w call $fgetc(l %fh)
    %ch_cmp_res1 =w culew %ch, 32  # compare with ASCII value for space character
    %ch_cmp_res2 =w cugew %ch, 127  # compare with ASCII value for DEL character
    %ch_total_res =w or %ch_cmp_res1, %ch_cmp_res2
    jnz %ch_total_res, @exit, @add_ch
@add_ch
    storeb %ch, %buffer
    %len =l add %len, 1
    %buffer =l add %buffer, 1
    %at_cap =w ceql %len, %_capacity
    jnz %at_cap, @exit, @get_char
@exit
    storeb 0, %buffer
    ret %len
}


function w $parse_file(l %fh) {
@start
    %_max_token_len =l loadl $max_token_len
    %token =l alloc1 %_max_token_len
@tokenize
    %len =l call $get_token(l %token, l %_max_token_len, l %fh)
    %cmp_res =w ceqw %len, 0
    jnz %cmp_res, @exit, @print_token
@print_token
    call $printf(l $file_token_fmt, ..., w %len, l %token)
    jmp @tokenize
@exit
    ret 0
}


export function w $main(l %argc, l %argv) {
@start
    call $printf(l $argc_fmt, ..., l %argc)
    %argv =l add %argv, 8
    %file_name =l loadl %argv
    call $printf(l $file_name_fmt, ..., l %file_name)
    %fh =l call $fopen(l %file_name, l $read_mode)
    jnz %fh, @fopen_success, @fopen_failure
@fopen_success
    call $parse_file(l %fh)
    call $fclose(l %fh)
    jmp @exit
@fopen_failure
    call $printf(l $err_open_file, ...)
@exit
    ret 0
}
