data $argc_fmt = { b "\nNumber of arguments = %u\n", b 0 }
data $file_name_fmt = { b "File name = %s\n\n", b 0 }
data $file_token_fmt = { b "File token (len=%lu; type=%u) = %s\n", b 0 }
data $ch_fmt = { b "character = %c\n", b 0 }
data $err_open_file = { b "Error: could not open specified file!\n", b 0 }
data $max_token_len = { l 33, b 0 }  # extra byte for null terminator
# data types and operation defs
data $num_literal_dtype = { b 35, b 0 }  # pound (#) - real number
data $func = { b 64, b 0 }  # commat (@)
data $add_op = { b 43, b 0 }
data $sub_op = { b 45, b 0 }
data $mul_op = { b 42, b 0 }
data $div_op = { b 47, b 0 }
# file open modes
data $read_mode = { b "r", b 0 }
data $write_mode = { b "w", b 0 }
# QBE main func preamble
data $wfmt = { b "data $fmt = { b \"%cd\\n\", b 0 }\n"}
data $def_main_func = { b "export function w $main() {\n@start\n", b 0 }
data $end_main_func = { b "\tret 0\n}", b 0 }
# QBE variable definitions and arithmetic operations
data $init_wvar_fmt = { b "\t%cC%lu =w copy %s\n", b 0 }
data $wadd_fmt = { b "\t%cC%lu =w add %cC%lu, %cC%lu\n", b 0 }
data $wsub_fmt = { b "\t%cC%lu =w sub %cC%lu, %cC%lu\n", b 0 }
data $wmul_fmt = { b "\t%cC%lu =w mul %cC%lu, %cC%lu\n", b 0 }
data $wprint_fmt = { b "\tcall $printf(l $fmt, ..., w %cC%lu)\n"}


function l $get_token(l %type, l %buffer, l %capacity, l %fh)
{
@start
    # load constants
    %_add_op =w loadub $add_op
    %_sub_op =w loadub $sub_op
    %_mul_op =w loadub $mul_op
    %_div_op =w loadub $div_op
    %_capacity =l sub %capacity, 1
    %len =l copy 0
@read_dtype
    %ch =w call $fgetc(l %fh)
    storeb %ch, %type
    %is_add_op =w ceqw %ch, %_add_op
    %is_sub_op =w ceqw %ch, %_sub_op
    %is_mul_op =w ceqw %ch, %_mul_op
    %is_div_op =w ceqw %ch, %_div_op
    %is_op =w or %is_add_op, %is_sub_op, %is_mul_op, %is_div_op
    %is_op =w or %is_op, %is_mul_op
    %is_op =w or %is_op, %is_div_op
    jnz %is_op, @handle_op_read, @get_ch
@get_ch
    %ch =w call $fgetc(l %fh)
    %ch_cmp_res1 =w culew %ch, 32  # compare with ASCII value for space character
    %ch_cmp_res2 =w cugew %ch, 127  # compare with ASCII value for DEL character
    %ch_total_res =w or %ch_cmp_res1, %ch_cmp_res2
    jnz %ch_total_res, @exit, @add_ch
@add_ch
    storeb %ch, %buffer
    %len =l add %len, 1
    %buffer =l add %buffer, 1
    %at_cap =w ceql %len, %_capacity
    jnz %at_cap, @exit, @get_ch
@handle_op_read
    %len =l add %len, 1
    jmp @get_ch
@exit
    storeb 0, %buffer
    ret %len
}


function w $process_token(l %dst_fh, w %type, l %token, l %ntoks) {
@start
    %_num_lit =w loadub $num_literal_dtype
    %_func =w loadub $func
    %_add_op =w loadub $add_op
    %_sub_op =w loadub $sub_op
    %_mul_op =w loadub $mul_op
    %_div_op =w loadub $div_op
@try_num_literal
    %res_token =w ceqw %type, %_num_lit
    jnz %res_token, @is_num_literal, @try_func
@try_func
    %res_token =w ceqw %type, %_func
    jnz %res_token, @is_func, @try_add_op
@try_add_op
    %res_token =w ceqw %type, %_add_op
    jnz %res_token, @is_add_op, @try_sub_op
@try_sub_op
    %res_token =w ceqw %type, %_sub_op
    jnz %res_token, @is_sub_op, @try_mul_op
@try_mul_op
    %res_token =w ceqw %type, %_mul_op
    jnz %res_token, @is_mul_op, @try_div_op
@try_div_op
    jmp @is_div_op

@is_num_literal
    call $fprintf(l %dst_fh, l $init_wvar_fmt, ..., w 37, l %ntoks, l %token)
    jmp @exit
@is_func
    %lvar =l sub %ntoks, 1
    call $fprintf(l %dst_fh, l $wprint_fmt, ..., w 37, l %lvar)
    jmp @exit
@is_add_op
    %fopand =l sub %ntoks, 2
    %lopand =l sub %ntoks, 1
    call $fprintf(l %dst_fh, l $wadd_fmt, ..., w 37, l %ntoks, w 37, l %fopand, w 37, l %lopand)
    jmp @exit
@is_sub_op
    %fopand =l sub %ntoks, 2
    %lopand =l sub %ntoks, 1
    call $fprintf(l %dst_fh, l $wsub_fmt, ..., w 37, l %ntoks, w 37, l %fopand, w 37, l %lopand)
    jmp @exit
@is_mul_op
    %fopand =l sub %ntoks, 2
    %lopand =l sub %ntoks, 1
    call $fprintf(l %dst_fh, l $wmul_fmt, ..., w 37, l %ntoks, w 37, l %fopand, w 37, l %lopand)
    jmp @exit
@is_div_op
    jmp @exit
@exit
    ret 0
}


function w $compile(l %dst_fh, l %src_fh) {
@start
    %_max_token_len =l loadl $max_token_len
    %ntoks =l copy 0
    %type =l alloc1 1
    %token =l alloc1 %_max_token_len
@begin_program
    call $fprintf(l %dst_fh, l $wfmt, ..., w 37)
    call $fprintf(l %dst_fh, l $def_main_func, ...)
@tokenize
    %len =l call $get_token(l %type, l %token, l %_max_token_len, l %src_fh)
    %token_t =w loadub %type
    %cmp_res =w ceqw %len, 0
    jnz %cmp_res, @end_program, @process_token
@process_token
    call $process_token(l %dst_fh, w %token_t, l %token, l %ntoks)
    %ntoks =l add %ntoks, 1
    jmp @tokenize
@end_program
    call $fprintf(l %dst_fh, l $end_main_func, ...)
@exit
    ret 0
}


export function w $main(l %argc, l %argv) {
@start
    %argv =l add %argv, 8
    %src_file_name =l loadl %argv
    %src_fh =l call $fopen(l %src_file_name, l $read_mode)
    %argv =l add %argv, 8
    %dst_file_name =l loadl %argv
    %dst_fh =l call $fopen(l %dst_file_name, l $write_mode)
    jnz %src_fh, @open_src_success, @open_src_failure
@open_src_success
    jnz %dst_fh, @open_dst_success, @open_dst_failure
@open_dst_success
    call $compile(l %dst_fh, l %src_fh)
    call $fclose(l %dst_fh)
    jmp @close_src_file
@open_dst_failure
    call $printf(l $err_open_file, ...)
@close_src_file
    call $fclose(l %src_fh)
    jmp @exit
@open_src_failure
    call $printf(l $err_open_file, ...)
@exit
    ret 0
}
